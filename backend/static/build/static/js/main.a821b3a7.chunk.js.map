{"version":3,"sources":["redux/toolTypes.js","redux/actions/actionTypes.js","redux/actions/action.js","utils/localStorage.js","utils/startup.js","components/Header.jsx","utils/drawHandler.js","components/Cell.jsx","components/Grid.jsx","components/Canvas.jsx","components/ColorPicker.jsx","components/Eraser.jsx","components/EyeDropper.jsx","components/PaletteCell.jsx","components/PaletteGrid.jsx","components/PaintBucket.jsx","components/UndoRedo.jsx","components/Animation.jsx","components/Preview.jsx","utils/generateCSS.js","components/Popup.jsx","components/NewProject.jsx","components/Clear.jsx","components/Save.jsx","components/Frame.jsx","components/FrameList.jsx","components/ChangeDimension.jsx","components/Download.jsx","App.js","redux/reducers/canvasReducer.js","redux/reducers/selectedCanvasReducer.js","redux/reducers/drawingToolReducer.js","redux/reducers/paletteReducer.js","redux/reducers/reducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["PENCIL","APPLY_PENCIL","tool","APPLY_ERASER","APPLY_PAINT_BUCKET","APPLY_EYE_DROPPER","APPLY_COLOR_PICKER","init","type","newProject","clear","setCanvas","grids","paletteGrid","cellSize","columns","rows","changeName","name","changeDimensions","newColumns","newRows","changeDuration","duration","changeCellSize","size","importPixelate","options","applyTools","paletteColor","color","id","drawingTool","switchTool","selectPaletteColor","applyColorPicker","addNewFrame","addDuplicatedFrame","deleteFrame","switchFrame","reorderFrame","initIndex","finalIndex","undo","ActionCreators","redo","getDataFromStorage","storage","data","getItem","JSON","parse","e","initialSetup","dispatch","dataStored","current","stored","paletteGridData","actions","setItem","stringify","initStorage","HeaderContainer","connect","state","present","get","className","target","href","getCellActionProps","props","grid","drawHandlerProvider","canvas","onMouseUp","setState","pressed","drawHandlers","onMouseDown","ev","preventDefault","actionProps","onMouseOver","Cell","nextProps","this","cell","width","drawHandler","style","height","backgroundColor","onFocus","onTouchStart","React","Component","Grid","newProps","cells","map","i","key","Canvas","onTouchEnd","onTouchCancel","CanvasContainer","palette","activeIndex","getIn","cellProps","ColorPicker","visible","handleClick","handleClose","applyPencil","usingColorPicker","colorString","rgb","r","g","b","a","onClick","onChange","onClose","ColorPickerContainer","toObject","active","EraserContainer","usingEraser","switchEraser","aria-label","EyeDropperContainer","usingEyeDropper","switchEyeDropper","PlatteCell","PaletteGrid","PaletteCell","PaletteGridContainer","bindActionCreators","PaintBucketContainer","usingPaintBucket","switchPaintBucket","UndoRedoContainer","Animation","radium","pulseKeyframes","keyframes","boxShadow","position","animation","animationName","left","top","Preview","storedData","animationData","cssString","animate","styles","previewWrapper","frames","newFrames","List","equalPercentage","forEach","frame","index","interval","Math","round","newFrame","Map","push","getAnimationKeyframes","pSize","c","generateAnimationCSSData","getImageData","format","generatePixelDrawCss","MozBoxShadow","WebkitBoxShadow","generatePreview","Popup","fileProcess","event","file","files","fileUpload","getImportContent","importType","getExportContent","exportType","getModalContent","popUpType","content","close","effect","onClickAway","PopupContainer","activeGrid","FormData","append","fetch","headers","method","body","then","res","json","alert","NewProjectContainer","ClearContainer","SaveContainer","drawingToSave","projectData","length","saveProjectToStorage","localStorage","Frame","addDuplicate","draggableId","toString","provided","draggableProps","dragHandleProps","ref","innerRef","FrameList","onDragEnd","result","destination","source","droppableId","direction","droppableProps","getFrames","placeholder","FrameListContainer","ChangeDimensionContainer","value","DownloadContainer","blob","FileSaver","saveAs","App","popUpShown","setPopUp","closePopUp","initCanvas","action","parseInt","fromJS","merge","changeDimension","newGrids","dRow","dCol","newGrid","j","splice","insert","changeDimensionForOne","remove","moveForward","insertPos","deletePos","drawPixel","set","applyPencilToGrid","setIn","isSameColor","colorA","colorB","getSameColorAdjCells","sameColorAdjCells","applyPaintBucket","currentId","adjCells","originalColor","cellQueue","shift","adjId","adjColor","indexOf","applyPaintBucketToGrid","applyEraser","drawingToolReducer","initPalette","setPalette","disablePaletteColor","applyEyeDropper","searchForColor","location","setInitialState","initialState","generateDefaultState","pipeReducers","reducers","reduce","reducer","partialReducer","store","createStore","undoable","canvasReducer","selectedCanvasReducer","paletteReducer","filter","includeAction","debug","Boolean","window","hostname","match","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a821b3a7.chunk.js","sourcesContent":["export const PENCIL = 'PENCIL';\nexport const ERASER = 'ERASER';\nexport const PAINT_BUCKET = 'PAINT_BUCKET';\nexport const MOVE = 'MOVE';\nexport const EYE_DROPPER = 'EYE_DROPPER';\nexport const COLOR_PICKER = 'COLOR_PICKER';","import * as tool from '../toolTypes';\n\nexport const SET_COLOR = 'SET_COLOR';\nexport const SET_INIT_STATE = 'SET_INIT_STATE'; \nexport const NEW_PROJECT = 'NEW_PROJECT';\nexport const CLEAR = 'CLEAR';\nexport const SET_CANVAS = 'SET_CANVAS';\nexport const CHANGE_NAME = 'CHANGE_NAME';\nexport const CHANGE_DIMENSIONS = 'CHANGE_DIMENSIONS';\nexport const CHANGE_DURATION = 'CHANGE_DURATION';\nexport const CHANGE_CELL_SIZE = 'CHANGE_CELL_SIZE';\nexport const IMPORT_PIXELATE = 'IMPORT_PIXELATE';\nexport const APPLY_PENCIL = `APPLY_${tool.PENCIL}`;\nexport const APPLY_ERASER = `APPLY_${tool.ERASER}`;\nexport const APPLY_PAINT_BUCKET = `APPLY_${tool.PAINT_BUCKET}`;\nexport const APPLY_EYE_DROPPER = `APPLY_${tool.EYE_DROPPER}`;\nexport const APPLY_COLOR_PICKER = `APPLY_${tool.COLOR_PICKER}`;\nexport const SWITCH_TOOL = 'SWITCH_TOOL';\nexport const SELECT_PALETTE_COLOR = 'SELECT_PALETTE_COLOR';\nexport const SELECT_CUSTOM_COLOR = 'SELECT_CUSTOM_COLOR';\nexport const ADD_NEW_FRAME = 'ADD_NEW_FRAME';\nexport const ADD_DUPLICATED_FRAME = 'ADD_DUPLICATED_FRAME';\nexport const DELETE_FRAME = 'DELETE_FRAME';\nexport const SWITCH_FRAME = 'SWITCH_FRAME';\nexport const REORDER_FRAMES = 'REORDER_FRAMES';\n\n","import * as type from './actionTypes';\nimport { ActionCreators } from 'redux-undo';\n\nexport function init() {\n    return {\n        type: type.SET_INIT_STATE\n    }\n}\n\nexport function newProject() {\n    return {\n        type: type.NEW_PROJECT\n    }\n}\n\nexport function clear() {\n    return {\n        type: type.CLEAR\n    }\n}\n\nexport function setCanvas(grids, paletteGrid, cellSize, columns, rows) {\n    return {\n        type: type.SET_CANVAS,\n        grids,\n        paletteGrid,\n        cellSize,\n        columns,\n        rows\n    }\n}\n\nexport function changeName(name) {\n    return {\n        type: type.CHANGE_NAME,\n        name\n    }\n}\n\nexport function changeDimensions(newColumns, newRows) {\n    return {\n        type: type.CHANGE_DIMENSIONS,\n        newColumns,\n        newRows\n    }\n}\n\nexport function changeDuration (duration) {\n    return {\n        type: type.CHANGE_DURATION,\n        duration\n    }\n}\n\nexport function changeCellSize (size) {\n    return {\n        type: type.CHANGE_CELL_SIZE,\n        size\n    }\n}\n\nexport function importPixelate({grids, columns, rows, options}) {\n    return {\n        type: type.IMPORT_PIXELATE,\n        grids,\n        columns,\n        rows,\n        options\n    };\n}\n\nexport function applyTools({paletteColor = '', color , id, columns, rows, drawingTool}) {\n    return {\n        type: `APPLY_${drawingTool}`,\n        paletteColor,\n        color,\n        id,\n        columns,\n        rows\n    }\n}\n\nexport function switchTool(drawingTool) {\n    return {\n        type: type.SWITCH_TOOL,\n        drawingTool\n    };\n}\n\nexport function selectPaletteColor(id) {\n    return {\n        type: type.SELECT_PALETTE_COLOR,\n        id\n    };\n}\n\nexport function applyColorPicker(color) {\n    return {\n        type: type.APPLY_COLOR_PICKER,\n        color\n    };\n}\n\nexport function addNewFrame() {\n    return {\n        type: type.ADD_NEW_FRAME,\n    }\n};\n\nexport function addDuplicatedFrame(id) {\n    return {\n        type: type.ADD_DUPLICATED_FRAME,\n        id\n    }\n};\n\nexport function deleteFrame(id) {\n    return {\n        type: type.DELETE_FRAME,\n        id\n    }\n}\n\nexport function switchFrame(id) {\n    return {\n        type: type.SWITCH_FRAME,\n        id\n    }\n}\n\nexport function reorderFrame(initIndex, finalIndex) {\n    return {\n      type: type.REORDER_FRAMES,\n      initIndex,\n      finalIndex\n    };\n}\n\nexport function undo() {\n    return ActionCreators.undo();\n};\n  \nexport function redo() {\n    return ActionCreators.redo();\n};\n  \n","const STORAGE_KEY = 'FTL';\n\nconst saveDataToStorage = (storage, data) => {\n    try {\n      storage.setItem(STORAGE_KEY, JSON.stringify(data));\n      return true;\n    } catch (e) {\n      return false; // There was an error\n    }\n}\n  \nexport function initStorage(storage) {\n    storage.setItem(\n        STORAGE_KEY,\n        JSON.stringify({\n        stored: [],\n        current: 0\n        })\n    );\n}\n\nexport function getDataFromStorage(storage) {\n  try {\n    const data = storage.getItem(STORAGE_KEY);\n    return data ? JSON.parse(data) : false;\n  } catch (e) {\n    return false; // There was an error\n  }\n}\n\nexport function saveProjectToStorage(storage, projectData) {\n    try {\n      let dataStored = getDataFromStorage(storage);\n      if (dataStored) {\n        dataStored.stored.push(projectData);\n        dataStored.current = dataStored.stored.length - 1;\n      } else {\n        dataStored = {\n          stored: [projectData],\n          current: 0\n        };\n      }\n      storage.setItem(STORAGE_KEY, JSON.stringify(dataStored));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }","import * as actions from '../redux/actions/action';\nimport { initStorage, getDataFromStorage } from './localStorage';\n\nconst initialSetup = (dispatch, storage) => {\n  const dataStored = getDataFromStorage(storage);\n\n  if (dataStored) {\n    // Load current project from the storage\n    if (dataStored.current > 0) {\n      const {\n        grids,\n        paletteGridData,\n        columns,\n        rows,\n        cellSize,\n        duration\n      } = dataStored.stored[dataStored.current];\n\n      dispatch(\n        actions.setCanvas(\n          grids,\n          paletteGridData,\n          cellSize,\n          columns,\n          rows,\n          duration\n        )\n      );\n    }\n  } else {\n    // If no data initialize storage\n    initStorage(storage);\n  }\n};\n\nexport default initialSetup;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { changeName } from '../redux/actions/action';\n\nconst Header = ({ changeName, name }) => {\n    \n    return (\n      <div className='header'>\n        <div className='title'>\n          <h2> PIXEL HUB </h2>\n        </div>\n        <div className=\"author\">\n          <h5>GITHUB: <a target=\"_blank\" href=\"https://github.com/ftlll/pixel\">FTL</a></h5>\n          {/* <iframe\n            src=\"https://ghbtns.com/github-btn.html?user=ftlll&repo=pixel&type=star&count=false\"\n            frameBorder=\"0\" scrolling=\"0\" width=\"100px\" height=\"20px\"\n          >\n          </iframe> */}\n        </div>\n      </div>\n    );\n};\n\nconst mapStateToProps = state => {\n    const grids = state.present.get('canvas');\n    return {\n        name: grids.get('name')\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    changeName: () => dispatch(changeName)\n});\n  \nconst HeaderContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Header);\n\nexport default HeaderContainer;","//import * as tool from '../redux/toolTypes';\n\nconst getCellActionProps = (props, id) => ({\n  color: props.grid.get(id),\n  id,\n  ...props\n});\n\nconst drawHandlerProvider = canvas => {\n    const drawHandlers = (grid) => {\n        return {\n            onMouseDown(id, ev) {\n                ev.preventDefault();\n                const { props } = grid;\n                const actionProps = getCellActionProps(props, id);\n                props.applyTools(actionProps);\n                canvas.setState({\n                    pressed: true\n                });\n            },\n            onMouseOver(id, ev) {\n                ev.preventDefault();\n                const { props } = grid;\n                const actionProps = getCellActionProps(props, id);\n                if (canvas.state.pressed) {\n                    props.applyTools(actionProps);\n                }\n            },\n        }\n    };\n    return {\n        onMouseUp() {\n            canvas.setState({\n                pressed: false\n            });\n        },\n        drawHandlers\n    }\n} \n\nexport default drawHandlerProvider;","import React from 'react';\n\nconst CELL_NULL_COLOR = 'rgba(49, 49, 49, 0.5)';\n\nclass Cell extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        const {cell: {color, width}} = this.props;\n        const updated = (nextProps.color !== color) || (nextProps.width !== width);\n        return updated;\n    }\n\n    render() {\n        const {\n            cell: {color, width},\n            id,\n            drawHandler\n            } = this.props;\n        const style = {\n            width: `${width}%`,\n            height: `${width}%`,\n            backgroundColor:  color || CELL_NULL_COLOR\n        };\n\n        return (\n            <div\n              style={style} className='cell'\n              onMouseDown={(ev) => drawHandler.onMouseDown(id, ev)}\n              onMouseOver={ev => drawHandler.onMouseOver(id, ev)}\n              onFocus={ev => drawHandler.onMouseOver(id, ev)}\n              onTouchStart={ev => drawHandler.onMouseDown(id, ev)}\n            />\n        );\n    }\n}\n\nexport default Cell;\n","import React from 'react';\nimport Cell from './Cell';\n\nclass Grid extends React.Component {\n    shouldComponentUpdate(newProps) {\n        const { cells } = this.props;\n        return newProps.cells !== cells;\n    }\n    \n    render() {\n        const { style, cells } = this.props;\n\n        return (\n            <div style={style}>\n                {cells.map((cell, i) => {\n                    return (\n                        <Cell cell={cell}\n                          key={cell.id}\n                          id={i}\n                          drawHandler={this.props.drawHandler}\n                        />\n                    )\n                })}\n            </div>\n        );\n    }\n}\n\nexport default Grid;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { applyTools } from '../redux/actions/action';\nimport drawHandlerProvider from '../utils/drawHandler';\nimport Grid from './Grid';\n\nclass Canvas extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {pressed: false};\n        this.drawHandlerProvider = drawHandlerProvider(this);\n    }\n\n    shouldComponentUpdate(newProps) {\n        const { grid } = this.props;\n        return newProps.grid !== grid;\n    }\n    \n    render() {\n        const { props } = this;\n        const cells = props.grid.map((color, i) => ({\n            id: i,\n            width: 100 / props.columns,\n            color\n        }));\n        \n        const style = {\n            height: 400,\n            width: 400,\n        };\n        return (\n            <div onMouseUp={this.drawHandlerProvider.onMouseUp}\n                onTouchEnd={this.drawHandlerProvider.onMouseUp}\n                onTouchCancel={this.drawHandlerProvider.onMouseUp}>\n                <Grid\n                style={style}\n                cells={cells}\n                drawingTool={props.drawingTool}\n                drawHandler={this.drawHandlerProvider.drawHandlers(this)}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    const canvas = state.present.get('canvas');\n    const drawingTool = state.present.get('drawingTool');\n    const palette = state.present.get('palette');\n    const activeIndex = palette.get('active');\n    const paletteColor = palette.getIn(['grid', activeIndex === -1 ? 0: activeIndex, 'color']);\n    return {\n        grid: canvas.get('grids').get(canvas.get('active')),\n        paletteColor,\n        drawingTool,\n        columns: canvas.get('columns'),\n        rows: canvas.get('rows')\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    applyTools: cellProps => dispatch(applyTools(cellProps))\n});\n\nconst CanvasContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Canvas);\n\nexport default CanvasContainer;\n","import React from 'react'\nimport Picker from 'react-color'\nimport { connect } from 'react-redux';\nimport { applyColorPicker, switchTool } from '../redux/actions/action'; \nimport * as tool from '../redux/toolTypes';\n\nclass ColorPicker extends React.Component {\n  state = {\n    visible: false,\n  };\n\n  handleClick = () => {\n    this.setState({ visible: !this.state.visible })\n  };\n\n  handleClose = () => {\n    this.setState({ visible: false })\n  };\n\n  render() {\n    const { color, applyColorPicker, applyPencil, usingColorPicker } = this.props;\n    this.applyColorPicker = (color) => {\n      color = color.rgb;\n      let colorString = 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + color.a + ')';\n      applyColorPicker(colorString);\n      applyPencil();\n    };\n\n    return (\n      <div className={`color-picker ${usingColorPicker ? 'active': ''}`}>\n        <i className='fas fa-paint-brush' onClick={ this.handleClick } />\n        { this.state.visible ? <div className='popover'>\n          <div className='cover' onClick={ this.handleClose }/>\n          <Picker color={ color } onChange={this.applyColorPicker} onClose={this.handleClose} type=\"sketch\"/>\n        </div> : null }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  const palette = state.present.get('palette').toObject();\n  const grid = palette.grid;\n  const active = palette.active;\n  return {\n      color: (active === -1) ? 'rgba(49,49,49,1)' : grid.getIn([active, 'color']),\n      usingColorPicker: state.present.get('drawingTool') === tool.COLOR_PICKER\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  applyColorPicker: (color) => dispatch(applyColorPicker(color)),\n  applyPencil: () => dispatch(switchTool(tool.PENCIL))\n});\n\nconst ColorPickerContainer = connect(mapStateToProps, mapDispatchToProps)(ColorPicker);\n\nexport default ColorPickerContainer;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as tool from '../redux/toolTypes';\nimport { switchTool } from '../redux/actions/action';\n\nconst Eraser = ({ usingEraser, switchEraser}) => {\n    return (\n        <div className={`eraser ${usingEraser ? 'active': ''}`}>\n            <i aria-label=\"Eraser Tool\"\n            onClick={switchEraser}\n            className='fas fa-eraser' />\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    usingEraser: state.present.get('drawingTool') === tool.ERASER\n});\n  \nconst mapDispatchToProps = dispatch => ({\n    switchEraser: () => dispatch(switchTool(tool.ERASER))\n});\n\nconst EraserContainer = connect(mapStateToProps, mapDispatchToProps)(Eraser);\n\nexport default EraserContainer;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as tool from '../redux/toolTypes';\nimport { switchTool } from '../redux/actions/action';\n\nconst EyeDropper = ({ usingEyeDropper, switchEyeDropper}) => {\n    return (\n        <div className={`eye-dropper ${usingEyeDropper ? 'active': ''}`}>\n            <i aria-label=\"EyeDropper Tool\"\n            onClick={switchEyeDropper}\n            className=\"eyeDropper fas fa-eye-dropper\" />\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    usingEyeDropper: state.present.get('drawingTool') === tool.EYE_DROPPER\n});\n  \nconst mapDispatchToProps = dispatch => ({\n    switchEyeDropper: () => dispatch(switchTool(tool.EYE_DROPPER))\n});\n\nconst EyeDropperContainer = connect(mapStateToProps, mapDispatchToProps)(EyeDropper);\n\nexport default EyeDropperContainer;\n","import React from 'react';\n\nconst CELL_NULL_COLOR = 'rgba(49, 49, 49, 0.5)';\n\nconst PlatteCell = props => {\n    const { width, color, active, selectPaletteColor, id } = props;\n\n    const handleClick = () => selectPaletteColor(id);\n\n    const style = {\n        width: `${width}%`,\n        height: `${width}%`,\n        backgroundColor:  color || CELL_NULL_COLOR\n    };\n\n    return (\n        <button style={style} onClick={handleClick} \n            className={`palette-cell ${active ? 'active' : ''}`}/>\n    );\n};\n\nexport default PlatteCell;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { selectPaletteColor } from '../redux/actions/action';\nimport PaletteCell from './PaletteCell';\n\nclass PaletteGrid extends React.Component { \n\n    render() {\n        const { grid, active, selectPaletteColor } = this.props;\n        const width = 100 / 8;\n        return (\n            <div className='palette-grid'>\n                {grid.map((cell, i) => {\n                    return (\n                        <PaletteCell color={cell.get('color')}\n                          active={active === i}\n                          width={width}\n                          key={cell.get('id')}\n                          id={i}\n                          selectPaletteColor={selectPaletteColor}\n                        />\n                    )\n                })}\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = state => {\n    const palette = state.present.get('palette').toObject();\n    return {\n        grid: palette.grid,\n        active: palette.active\n    };\n};\n\nconst mapDispatchToProps = dispatch =>   \n  bindActionCreators(\n    {\n      selectPaletteColor\n    },\n    dispatch\n);\n\nconst PaletteGridContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PaletteGrid);\n\nexport default PaletteGridContainer;","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as tool from '../redux/toolTypes';\nimport { switchTool } from '../redux/actions/action';\n\nconst PaintBucket = ({ usingPaintBucket, switchPaintBucket}) => {\n    return (\n        <div className={`bucket ${usingPaintBucket ? 'active': ''}`}>\n            <i aria-label=\"Paint Bucket Tool\"\n            className='fas fa-fill-drip'\n            onClick={switchPaintBucket}/>\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    usingPaintBucket: state.present.get('drawingTool') === tool.PAINT_BUCKET\n});\n  \nconst mapDispatchToProps = dispatch => ({\n    switchPaintBucket: () => dispatch(switchTool(tool.PAINT_BUCKET))\n});\n\nconst PaintBucketContainer = connect(mapStateToProps, mapDispatchToProps)(PaintBucket);\n\nexport default PaintBucketContainer;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as actions from '../redux/actions/action';\n\nconst UndoRedo = props => {\n  const undo = () => {\n    props.actions.undo();\n  };\n\n  const redo = () => {\n    props.actions.redo();\n  };\n\n  return (\n    <div className=\"undo-redo\">\n      <div className='undo-container'>\n        <button className='undo fas fa-undo-alt'\n          onClick={() => {undo()}} />\n      </div>\n      <div className='redo-container'>\n        <button className='redo fas fa-redo-alt'\n          onClick={() => {redo()}} />\n      </div>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(actions, dispatch)\n});\n\nconst UndoRedoContainer = connect(\n  null,\n  mapDispatchToProps\n)(UndoRedo);\nexport default UndoRedoContainer;","import React from 'react';\nimport radium from 'radium';\n\nconst Animation = radium(props => {\n  const pulseKeyframes = radium.keyframes(props.boxShadow, 'pulse');\n  const style = {\n    position: 'absolute',\n    animation: `x ${props.duration}s infinite`,\n    animationName: pulseKeyframes,\n    left: '-5px',\n    top: '-5px'\n  };\n  return <div style={style} />;\n});\n\nexport default Animation;\n","import React from 'react';\nimport { StyleRoot } from 'radium';\nimport {\n  generatePixelDrawCss,\n  generateAnimationCSSData\n} from '../utils/generateCSS';\nimport Animation from './Animation';\n\nconst Preview = props => {\n    const generatePreview = () => {\n        const { active, duration, storedData } = props;\n        const { grids, columns, cellSize, animate } = props;\n        const animation = grids.size > 1 && animate;\n        let animationData;\n        let cssString;\n    \n        const styles = {\n          previewWrapper: {\n            height: cellSize,\n            width: cellSize\n          }\n        };\n\n        if (animate) {\n          animationData = generateAnimationCSSData(\n            grids,\n            columns,\n            cellSize\n          )\n        } else {\n          cssString = generatePixelDrawCss(\n            grids.get(active),\n            columns,\n            cellSize,\n            'string'\n          );\n        }\n\n          styles.previewWrapper.boxShadow = cssString;\n          styles.previewWrapper.MozBoxShadow = cssString;\n          styles.previewWrapper.WebkitBoxShadow = cssString;\n    \n        return (\n          <div style={animation ? null : styles.previewWrapper}>\n            {animation ? (\n            <StyleRoot>\n              <Animation duration={duration} boxShadow={animationData} />\n            </StyleRoot>\n            ) : null}\n          </div>\n        );\n      };\n    \n      const { storedData } = props;\n      const { columns, rows, cellSize } = storedData || props;\n      const style = {\n        width: columns * cellSize,\n        height: rows * cellSize\n      };\n    \n      return (\n        <div className=\"preview\" style={style}>\n          {generatePreview()}\n        </div>\n      );\n}\n\nexport default Preview;\n\n","import {\n    getImageData,\n    getImageCssClassOutput,\n    getAnimationKeyframes,\n    getAnimationCssClassOutput\n} from 'box-shadow-pixels';\nimport { List, Map } from 'immutable';\n  \nconst PIXELART_CSS_CLASS_NAME = 'pixel-art-hub';\n\nexport function generatePixelDrawCss(frame, columns, cellSize, type) {\n    return getImageData(frame, {\n        format: type,\n        pSize: cellSize,\n        c: columns\n    });\n}\n  \nexport function getCssImageClassOutput(frame, columns, cellSize) {\n    return getImageCssClassOutput(frame, {\n        format: 'string',\n        pSize: cellSize,\n        c: columns,\n        cssClassName: PIXELART_CSS_CLASS_NAME\n    });\n}\n  \nexport function exportAnimationData(frames, columns, cellSize, duration) {\n    return getAnimationCssClassOutput(frames, {\n        pSize: cellSize,\n        c: columns,\n        duration,\n        cssClassName: PIXELART_CSS_CLASS_NAME\n    });\n}\n  \nexport function generateAnimationCSSData(frames, columns, cellSize) {\n    let newFrames = List();\n    let size = frames.size;\n\n    const equalPercentage = 100 / size;\n    frames.forEach((frame, index) => {\n        let interval = (index === size - 1)\n          ? 100\n          : Math.round((index + 1) * equalPercentage * 10) / 10;\n\n        let newFrame = Map({\n            grid: frame,\n            interval\n        });\n        newFrames = newFrames.push(newFrame);\n    })\n    return getAnimationKeyframes(newFrames, {\n        pSize: cellSize,\n        c: columns\n    });\n}","import React from 'react';\nimport Modal from 'react-awesome-modal';\nimport { connect } from 'react-redux';\nimport { importPixelate } from '../redux/actions/action';\nimport Preview from './Preview';\nimport Dropzone from 'react-dropzone';\n\nclass Popup extends React.Component {\n    state = {};\n    fileProcess = event => {\n        this.setState({\n            file: event.target.files[0]\n        });\n    }\n    fileUpload = () => {\n        this.props.fileUpload(this.state)\n    }\n\n    getImportContent = (importType) => {\n\n    }\n\n    getExportContent = (exportType) => {\n\n    }\n\n    getModalContent = (popUpType) => {\n        let content;\n        switch (popUpType) {\n            case 'import':\n                content = (\n                    <div className='modal-content'>\n                        <button className='popup-close' onClick={() => this.props.close()}>x</button>\n                        <div className='popup-header'>Import</div>\n                        <input type=\"file\" onChange={this.fileProcess}></input>\n                        <button onClick={this.fileUpload}>Upload</button>\n                    </div>);\n                break;\n            case 'export':\n                content = (\n                    <div className='modal-content'>\n                        <button className='popup-close' onClick={() => this.props.close()}>x</button>\n                        <div className='popup-header'>Export</div>\n                        <Preview\n                            key=\"0\"\n                            grids={this.props.grids}\n                            columns={this.props.columns}\n                            rows={this.props.rows}\n                            cellSize={5}\n                            duration={5}\n                            active={0}\n                            animate={true}\n                        />\n                    </div>\n                );\n                break;\n            default:\n        }\n        return content;\n    }\n\n    render() {\n        const { visible, popUpType } = this.props;\n        return (\n            <Modal visible={visible}\n                width=\"80%\"\n                height=\"80%\"\n                effect=\"fadeInUp\"\n                onClickAway={() => this.props.close()}>\n                {this.getModalContent(popUpType)}\n            </Modal>\n        );\n    }\n}\n  \nconst mapStateToProps = state => {\n    const canvas = state.present.get('canvas');\n    const active = canvas.get('active');\n    return {\n      grids: canvas.get('grids'),\n      active,\n      activeGrid: canvas.getIn(['grids', active]),\n      paletteGridData: state.present.getIn(['palette', 'grid']),\n      columns: canvas.get('columns'),\n      rows: canvas.get('rows'),\n      cellSize: state.present.get('size'),\n      duration: state.present.get('duration')\n    };\n  };\n\nconst mapDispatchToProps = dispatch => ({\n    fileUpload: (state) => {\n        const data = new FormData();\n        if(state.file) {\n            data.append('file', state.file);\n            fetch('http://localhost:5000/api/pixelate', {\n                headers: {\n                    'Access-Control-Allow-Origin': true,\n                },\n                method: 'POST',\n                body: data,\n            }).then(res => {\n                return res.json();\n            }).then(data => {\n                dispatch(importPixelate(data))\n            })\n        } else {\n            alert(\"no file attached\");\n        }\n    }\n});\n\nconst PopupContainer = connect(mapStateToProps, mapDispatchToProps)(Popup);\n\nexport default PopupContainer;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { newProject } from '../redux/actions/action';\n\nconst NewProject = ({ newProject }) => {\n    return (\n        <button\n            type=\"button\"\n            className='newProject'\n            onClick={newProject}>\n            NEW PROJECT\n        </button>\n    );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    newProject: () => dispatch(newProject())\n});\n  \nconst NewProjectContainer = connect(\n    null,\n    mapDispatchToProps\n)(NewProject);\n\nexport default NewProjectContainer;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { clear } from '../redux/actions/action';\n\nconst Clear = ({ clear }) => {\n    return (\n        <button\n            type=\"button\"\n            className='clear'\n            onClick={clear}>\n            CLEAR\n        </button>\n    );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    clear: () => dispatch(clear())\n});\n  \nconst ClearContainer = connect(\n    null,\n    mapDispatchToProps\n)(Clear);\n\nexport default ClearContainer;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { saveProjectToStorage } from '../utils/localStorage';\n\nconst Save = props => {\n    const save = () => {\n        const drawingToSave = {\n            grids: props.grids,\n            paletteGridData: props.paletteGridData,\n            cellSize: props.cellSize,\n            columns: props.columns,\n            rows: props.rows,\n            animate: props.grids.size > 1,\n        };\n      \n        saveProjectToStorage(localStorage, drawingToSave)\n    }\n    return (\n        <button className='save'\n            type=\"button\"\n            onClick={save}>\n            SAVE\n        </button>\n    );\n};\n\nconst mapStateToProps = state => {\n    const canvas = state.present.get('canvas');\n    return {\n      grids: canvas.get('grids'),\n      columns: canvas.get('columns'),\n      rows: canvas.get('rows'),\n      cellSize: state.present.get('cellSize'),\n      paletteGridData: state.present.getIn(['palette', 'grid'])\n    };\n  };\n\nconst mapDispatchToProps = dispatch => ({\n\n});\n  \nconst SaveContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Save);\n\nexport default SaveContainer;","import React from 'react';\nimport { List } from 'immutable';\nimport { Draggable } from 'react-beautiful-dnd';\nimport Preview from './Preview';\n\nclass Frame extends React.Component {\n    render() {\n        const {grid, columns, rows, actions, id} = this.props;\n        const switchFrame = () => {\n            actions.switchFrame(id);\n        };\n    \n        const addDuplicate = () => {\n            actions.addDuplicatedFrame(id);\n        }\n    \n        const deleteFrame = () => {\n            actions.deleteFrame(id);\n        }\n        return (\n            <Draggable key={id} draggableId={id.toString()} index={id}>\n                {provided => (\n                    <div onClick={switchFrame}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    ref={provided.innerRef}\n                    className='frame'>\n                        <Preview\n                            key={id}\n                            grids={List([grid])}\n                            columns={columns}\n                            rows={rows}\n                            cellSize={5}\n                            active={0}\n                        />\n                        <i onClick={addDuplicate} className='frame-add fas fa-copy' />\n                        <i onClick={deleteFrame} className='frame-delete fas fa-trash-alt' />\n                    </div>\n                )}\n            </Draggable>\n        );\n    }\n};\n\nexport default Frame;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Droppable, DragDropContext } from 'react-beautiful-dnd';\nimport * as actions from '../redux/actions/action';\nimport Frame from './Frame';\n\nclass FrameList extends React.Component {\n    onDragEnd = result => {\n      const { destination, source } = result;\n      const { actions } = this.props;\n\n      if (!destination) {\n        return;\n      }\n\n      if (\n        destination.droppableId === source.droppableId &&\n        destination.index === source.index\n      ) {\n        return;\n      }\n\n      actions.reorderFrame(source.index, destination.index);\n    }\n\n    getFrames() {\n        const { grids, columns, rows, actions } = this.props;\n        return grids.map((grid, index) => (\n          <Frame\n            key={index}\n            id={index}\n            grid={grid}\n            columns={columns}\n            rows={rows}\n            actions={{\n              switchFrame: actions.switchFrame,\n              deleteFrame: actions.deleteFrame,\n              addDuplicatedFrame: actions.addDuplicatedFrame, \n            }}\n          />\n        ));\n    }\n\n    addNewFrame = () => {\n      const { actions } = this.props;\n      actions.addNewFrame()\n    }\n\n    render() {\n        return (\n          <div className='frames-handler'>\n            <button type='button' className='frames-list-add' onClick={() => this.addNewFrame()}><div>+</div></button>\n            <div className='frames-list-content'>\n              <DragDropContext onDragEnd = {this.onDragEnd} className='framesHandlerContext'>\n                <Droppable droppableId=\"droppable\" direction=\"vertical\" className='frames-handler'>\n                {provided => (\n                  <div ref={provided.innerRef}\n                  {...provided.droppableProps}>\n                  {this.getFrames()}\n                  {provided.placeholder}\n                  </div>\n                )}\n                </Droppable>\n              </DragDropContext>\n            </div>\n          </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => state.present.get('canvas').toObject();\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(actions, dispatch)\n});\n\nconst FrameListContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FrameList);\nexport default FrameListContainer;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { changeDimensions } from '../redux/actions/action';\n\nconst ChangeDimension = props => {\n  const { changeDimensions, rows, columns } = props;\n  const changeHeight = (newRows) => {\n    changeDimensions(columns, newRows);\n  };\n  const changeWidth = (newColumns) => {\n    changeDimensions(newColumns,rows);\n  };\n\n  return (\n    <div>\n      <div className=\"duration\">\n        <label> ROWS\n          <input\n            type=\"number\"\n            value={rows}\n            onChange={event => {\n              changeHeight(event.target.value);\n            }}\n          />\n        </label>\n      </div>\n      <div className=\"duration\">\n        <label> COLUMNS\n          <input\n            type=\"number\"\n            value={columns}\n            onChange={event => {\n              changeWidth(event.target.value);\n            }}\n          />\n        </label>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n    const canvas = state.present.get('canvas');\n    return {\n        columns: canvas.get('columns'),\n        rows: canvas.get('rows'),\n        duration: canvas.get('duration'),\n        size: canvas.get('size')\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  changeDimensions: (newColumns, newRows) => dispatch(changeDimensions(newColumns, newRows))\n});\n\nconst ChangeDimensionContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChangeDimension);\nexport default ChangeDimensionContainer;","import React from 'react';\nimport { connect } from 'react-redux';\nimport FileSaver from 'file-saver';\n\nconst Download = props => {\n    const { canvas } = props;\n    const downloadIMG = () => {\n        fetch('http://localhost:5000/api/img', {\n            headers: {\n                'Access-Control-Allow-Origin': true,\n                'Content-Type': 'application/json',\n            },\n            method: 'POST',\n            body: JSON.stringify({\n                grids: canvas.get('grids'),\n                columns: canvas.get('columns'),\n                rows: canvas.get('rows'),\n                active: canvas.get('active'),\n            }),\n        }).then(res => {\n            return res.blob();\n        })\n        .then(blob => {\n            FileSaver.saveAs(blob, 'pil.gif');\n        })\n    }\n\n    return (\n        <div onClick={downloadIMG}>DOWNLOAD</div>\n    );\n};\n\nconst mapStateToProps = state => {\n    const canvas = state.present.get('canvas');\n    return {\n        canvas\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  \n});\n\nconst DownloadContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Download);\nexport default DownloadContainer;","import React from 'react';\nimport './css/imports.css';\nimport init from './utils/startup';\nimport HeaderContainer from './components/Header';\nimport CanvasContainer from './components/Canvas';\nimport ColorPickerContainer from './components/ColorPicker';\nimport EraserContainer from './components/Eraser';\nimport EyeDropperContainer from './components/EyeDropper';\nimport PaletteGridContainer from './components/PaletteGrid';\nimport PaintBucketContainer from './components/PaintBucket';\nimport UndoRedoContainer from './components/UndoRedo';\nimport PopupContainer from './components/Popup';\nimport NewProjectContainer from './components/NewProject';\nimport ClearContainer from './components/Clear';\nimport SaveContainer from './components/Save';\nimport FrameListContainer from './components/FrameList';\nimport ChangeDimensionContainer from './components/ChangeDimension';\nimport DownloadContainer from './components/Download';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      popUpType: null,\n      popUpShown: false\n    };\n  }\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    init(dispatch, localStorage);\n  }\n\n  setPopUp(type) {\n    this.setState({\n      popUpShown: true,\n      popUpType: type,\n    });\n  }\n\n  closePopUp() {\n    this.setState({\n      popUpShown: false,\n      popUpType: null,\n    });\n  }\n\n  render() {\n    const { popUpShown, popUpType } = this.state;\n    return (\n      <div className='background'>\n        <div className='app'>\n        <HeaderContainer/>\n        <div className='tool-bar'>\n            <NewProjectContainer/>\n            <ClearContainer />\n            <SaveContainer />\n            <button className='upload' onClick={() => this.setPopUp('import')}>IMPORT</button>\n            <button className='upload' onClick={() => this.setPopUp('export')}>EXPORT</button>\n        </div>\n        <div className='app-content'>\n          <div className='side-bar col-lg-2'>\n            <FrameListContainer/>\n          </div>\n          <div className='canvas-container col-lg-6'>\n            <CanvasContainer/>\n          </div>\n          <div className='tools col-lg-4'>\n            <div className='col-12'>\n              <PaletteGridContainer />\n              <div> \n              <EraserContainer />\n              <PaintBucketContainer />\n              <EyeDropperContainer/>\n              <ColorPickerContainer />\n              </div>\n              <UndoRedoContainer />\n              <ChangeDimensionContainer />\n              <DownloadContainer />\n            </div>\n          </div>\n        </div>\n        <PopupContainer visible={popUpShown} popUpType={popUpType} close={() => this.closePopUp()}/>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import{ List, Map, fromJS } from 'immutable';\nimport * as type from '../actions/actionTypes';\n\nconst initCanvas = (action = {})  => {\n  const options = action.options || {};\n  const columns = parseInt(options.columns, 10) || 16;\n  const rows = parseInt(options.rows, 10) || 16;\n  const size = parseInt(options.size, 10) || 10;\n  const duration = parseInt(options.duration, 10) || 5;\n\n  let grid = List();\n  for(let i = 0; i < rows * columns; i++) {\n    grid = grid.push('');\n  }\n  let grids = List();\n  grids = grids.push(grid);\n\n  return Map({\n    name: 'name',\n    grids,\n    active: 0,\n    columns,\n    rows,\n    size,\n    duration\n  })\n}\n\nconst setCanvas = (canvas, action) => {\n  const { grids, columns, rows, cellSize, duration } = action;\n  \n  return fromJS({\n    grids,\n    columns,\n    rows,\n    size: cellSize,\n    duration,\n    active: 0\n  });\n};\n\nconst importPixelate = (action) => {\n  const columns = action.columns;\n  const rows = action.rows;\n  // const options = action.options;\n  const grids = List(action.grids);\n  // const size = parseInt(action.size, 10) || 10;\n  // const duration = parseInt(action.duration, 10) || 5;\n\n  return Map({\n    grids,\n    active: 0,\n    columns,\n    rows,\n    // size,\n    // duration\n  })\n}\n\nconst changeName = (canvas, action) => {\n  return canvas.merge({\n    name: action.name\n  })\n}\n\nconst changeDimensionForOne = (grid, columns, rows, newColumns, newRows) => {\n  const dRow = newRows - rows;\n  const dCol = newColumns - columns;\n  let newGrid = grid;\n\n  if (dRow > 0) {\n    for (let i = 0; i < columns; i++) {\n      for (let j = 0; j < dRow; j++) {\n        newGrid = newGrid.push('');\n      }\n    }\n  } else if (dRow < 0) {\n    for (let i = 0; i < columns; i++) {\n      for (let j = dRow; j < 0; j++) {\n        newGrid = newGrid.splice(-1, 1);\n      }\n    }\n  } else if (dCol > 0) {\n    for (let i = columns * rows; i > 0; i -= columns) {\n      for (let j = 0; j < dCol; j++) {\n        newGrid = newGrid.insert(i, '');\n      }\n    }\n  } else if (dCol < 0) {\n    for (let i = columns * rows; i > 0; i -= columns) {\n      newGrid = newGrid.splice(i + dCol, -dCol);\n    }\n  }\n  return newGrid;\n}\n\nconst changeDimension = (canvas, action) => {\n  const columns = canvas.get('columns');\n  const rows = canvas.get('rows');\n  const { newColumns, newRows } = action;\n  let newGrids = List();\n  const grids = canvas.get('grids');\n  grids.forEach(grid => {\n    newGrids = newGrids.push(changeDimensionForOne(grid, columns, rows, newColumns, newRows))\n  });\n  \n  return canvas.merge({\n    grids: newGrids,\n    columns: newColumns,\n    rows: newRows\n  });\n};\n\nconst changeDuration = (canvas, action) => {\n  const duration = action.duration;\n  return canvas.merge({\n    duration\n  }); \n}\n\nconst changeCellSize = (canvas, action) => {\n  const size = action.size;\n  return canvas.merge({\n    size\n  }); \n}\n\nconst addNewFrame = (canvas, action) => {\n  const grids = canvas.get('grids');\n  const columns = canvas.get('columns');\n  const rows = canvas.get('rows');\n  let grid = List();\n  for(let i = 0; i < rows * columns; i++) {\n    grid = grid.push('');\n  }\n  const newGrids = grids.insert(grids.size, grid);\n  return canvas.merge({\n    grids: newGrids,\n    active: grids.size\n  }); \n};\n\nconst addDuplicatedFrame = (canvas, action) => {\n  const grids = canvas.get('grids');\n  const grid = grids.get(action.id);\n  const newGrids = grids.insert(action.id, grid);\n  return canvas.merge({\n    grids: newGrids,\n    active: action.id + 1\n  }); \n};\n\nconst deleteFrame = (canvas, action) => {\n  const grids = canvas.get('grids');\n  const newGrids = grids.remove(action.id);\n  return canvas.merge({\n    grids: newGrids,\n    active: action.id\n  }); \n};\n\nconst switchFrame = (canvas, action) => {\n  return canvas.merge({\n    active: action.id\n  }); \n}\n\nconst reorderFrame = (canvas, action) => {\n  let grids = canvas.get('grids');\n  const { initIndex, finalIndex } = action;\n  const moveForward = initIndex < finalIndex;\n  const insertPos = finalIndex + (moveForward ? 1 : 0);\n  const deletePos = initIndex + (moveForward ? 0 : 1);\n  const grid = grids.get(initIndex);\n  grids = grids.splice(insertPos, 0, grid)\n            .splice(deletePos, 1);\n\n  return canvas.merge({\n    grids,\n    active: finalIndex\n  });\n};\n\nexport default function(canvas = initCanvas(), action) {\n    switch (action.type) {\n      case type.SET_INIT_STATE:\n      case type.NEW_PROJECT:\n        return initCanvas(action);\n      case type.SET_CANVAS:\n        return setCanvas(canvas, action);\n      case type.CHANGE_NAME:\n        return changeName(canvas,action);\n      case type.CHANGE_DIMENSIONS:\n        return changeDimension(canvas, action);\n      case type.CHANGE_DURATION:\n        return changeDuration(canvas, action);\n      case type.CHANGE_DURATION:\n        return changeCellSize(canvas, action);\n      case type.IMPORT_PIXELATE:\n        return importPixelate(action);\n      case type.ADD_NEW_FRAME:\n        return addNewFrame(canvas);\n      case type.ADD_DUPLICATED_FRAME:\n        return addDuplicatedFrame(canvas, action);\n      case type.DELETE_FRAME:\n        return deleteFrame(canvas, action);\n      case type.SWITCH_FRAME:\n        return switchFrame(canvas, action);\n      case type.REORDER_FRAMES:\n        return reorderFrame(canvas, action);\n      default:\n        return canvas;\n    }\n  }","//import{List, Map} from 'immutable';\nimport * as type from '../actions/actionTypes';\nimport { List } from 'immutable';\n\nconst GRID_INIT_COLOR = 'rgba(49, 49, 49, 1)';\n\nconst clear = (canvas, action) => {\n  const active = canvas.get('active');\n  const columns = canvas.get('columns');\n  const rows = canvas.get('rows');\n  let grid = List();\n  for(let i = 0; i < rows * columns; i++) {\n    grid = grid.push('');\n  }\n  const newCanvas = canvas.setIn(['grids', active], grid);\n  return newCanvas;\n}\n\nconst drawPixel = (grid, color, id) => {\n  return grid.set(id, color);\n}\n\nconst applyPencilToGrid = (grid, {paletteColor, id}) => {\n  const newGrid = drawPixel(grid, paletteColor, id);\n  return newGrid;\n}\n\nconst applyPencil = (canvas, action) => {\n  const active = canvas.get('active');\n  const grid = canvas.get('grids').get(active);\n  const newGrid = applyPencilToGrid(grid, action);\n  const newCanvas = canvas.setIn(['grids', active], newGrid);\n  return newCanvas;\n};\n\nconst applyEraser = (canvas, action) => {\n  const active = canvas.get('active');\n  const grid = canvas.get('grids').get(active);\n  const newGrid = drawPixel(grid, '', action.id);\n  const newCanvas = canvas.setIn(['grids', active], newGrid);\n  return newCanvas;\n}\n\nconst isSameColor = (colorA, colorB) =>\n  (colorA || GRID_INIT_COLOR) === (colorB || GRID_INIT_COLOR);\n\nconst getSameColorAdjCells = (grid, color, id, columns, rows) => {\n  const sameColorAdjCells = [];\n\n  // test upper cell\n  if (id >= columns) {\n    if (isSameColor(grid.get(id - columns), color)) {\n      sameColorAdjCells.push(id - columns);\n    }\n  }\n\n  // test bottom cell\n  if (id < (columns - 1) * rows) {\n    if (isSameColor(grid.get(id + columns), color)) {\n      sameColorAdjCells.push(id + columns);\n    }\n  }\n\n  // test left cell\n  if(id % columns !== 0) {\n    if (isSameColor(grid.get(id - 1), color)) {\n      sameColorAdjCells.push(id - 1);\n    }\n  }\n  \n  //test right cell\n  if (id % columns !== (columns - 1)) {\n    if (isSameColor(grid.get(id + 1), color)) {\n      sameColorAdjCells.push(id + 1);\n    }\n  }\n  return sameColorAdjCells;\n};\n\nconst applyPaintBucketToGrid = (grid, { id, paletteColor, columns, rows }) => {\n  const originalColor = grid.get(id);\n  const cellQueue = [id];\n  let newGrid = grid;\n  let currentId;\n  let adjCells;\n\n  while (cellQueue.length > 0) {\n    currentId = cellQueue.shift();\n    newGrid = drawPixel(newGrid, paletteColor, currentId);\n    adjCells = getSameColorAdjCells(newGrid, originalColor, currentId, columns, rows);\n\n    for(let i = 0; i < adjCells.length; i++) {\n        let adjId = adjCells[i];\n        let adjColor = newGrid.get(adjId);\n        if (cellQueue.indexOf(adjId) === -1 && adjColor !== paletteColor) {\n          cellQueue.push(adjId);\n        }\n    }\n  }\n  return newGrid;\n};\n\nconst applyPaintBucket = (canvas, action) => {\n  const active = canvas.get('active');\n  const grid = canvas.get('grids').get(active);\n  const newGrid = applyPaintBucketToGrid(grid, action);\n  const newCanvas = canvas.setIn(['grids', active], newGrid);\n  return newCanvas;\n}\n\nexport default function(canvas, action) {\n    switch (action.type) {\n        case type.CLEAR:\n            return clear(canvas, action);\n        case type.APPLY_PENCIL:\n            return applyPencil(canvas, action);\n        case type.APPLY_ERASER:\n            return applyEraser(canvas, action);\n        case type.APPLY_PAINT_BUCKET:\n            return applyPaintBucket(canvas, action);\n        default:\n            return canvas;\n    }\n}","import * as type from '../actions/actionTypes';\nimport * as tool from '../toolTypes';\n\nconst switchTool = (drawingTool = tool.PENCIL, action) => {\n    if (drawingTool === action.drawingTool) {\n        return tool.PENCIL;\n    } else {\n        return action.drawingTool;\n    }\n}\n\nexport default function drawingToolReducer(drawingTool = tool.PENCIL, action) {\n    switch (action.type) {\n        case type.SET_INIT_STATE:\n            return tool.PENCIL;\n        case type.SWITCH_TOOL:\n            return switchTool(drawingTool, action);\n        case type.APPLY_EYE_DROPPER:\n            return tool.PENCIL;\n        case type.SELECT_PALETTE_COLOR:\n            return drawingTool;\n        default:\n            return drawingTool;\n    }\n};","import * as type from '../actions/actionTypes';\nimport * as tool from '../toolTypes';\nimport { List, Map, fromJS } from 'immutable';\n\nconst initPaletteGrid = () => {\n    return List([\n        '#ff0000',\n        '#ff3300',\n        '#ff9900',\n        '#ffff00',\n        '#99ff00',\n        '#00ff00',\n        '#00ffff',\n        '#0000ff',\n        '#6600ff',\n        '#ff00ff',\n        '#ff0066',\n        '','',''\n    ]).map((color, i) => Map({ color, id: i}));\n};\n\nconst initPalette = () => {\n    return Map({\n        grid: initPaletteGrid(),\n        active: 0\n    });\n};\n\nconst setPalette = (palette, action) => {\n    const { paletteGrid } = action;\n    return fromJS({\n        grid: paletteGrid,\n        active: 0\n    });\n};\n\nconst selectPaletteColor = (palette, action) => {\n    return palette.set('active', action.id);\n};\n\nconst disablePaletteColor = (palette, action) => {\n    if ( action.drawingTool === tool.ERASER ) {\n        return palette.set('active', -1);\n    }\n    return palette;\n};\n\nconst searchForColor = (grid, color) => {\n    for (let i = 0; i < grid.size - 1; i++) {\n        if (grid.getIn([i, 'color']) === color) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst applyEyeDropper = (palette, action) => {\n    const color = action.color;\n    const grid = palette.get('grid');\n    const index = searchForColor(grid, color);\n    if (index !== -1) {\n        return palette.set('active', index);\n    }\n    const location = grid.size - 1;\n    return palette.merge({\n        grid: grid.setIn([location, 'color'], color),\n        active: location\n    });\n};\n\nconst applyColorPicker = (palette, action) => {\n    const color = action.color;\n    const grid = palette.get('grid');\n    const active = palette.get('active');\n    if (active === -1) {\n        return palette.merge({\n            grid: grid.setIn([active, 'color'], color),\n            active: grid.size - 1\n        });\n    } else {\n        return palette.merge({\n            grid: grid.setIn([active, 'color'], color),\n            active: active\n        });\n    }\n};\n\nexport default function (palette = initPalette(), action) {\n    switch (action.type) {\n        case type.SET_INIT_STATE:\n        case type.NEW_PROJECT:\n            return initPalette();\n        case type.SET_CANVAS:\n            return setPalette(palette, action);\n        case type.SELECT_PALETTE_COLOR:\n            return selectPaletteColor(palette, action);\n        case type.APPLY_EYE_DROPPER:\n            return applyEyeDropper(palette, action);\n        case type.SWITCH_TOOL:\n            return disablePaletteColor(palette, action);\n        case type.APPLY_COLOR_PICKER:\n            return applyColorPicker(palette, action);\n        default:\n            return palette;\n    }     \n}","import { Map } from 'immutable';\nimport canvasReducer from './canvasReducer';\nimport selectedCanvasReducer from './selectedCanvasReducer';\nimport drawingToolReducer from './drawingToolReducer';\nimport paletteReducer from './paletteReducer';\nimport * as type from '../actions/actionTypes';\n\nfunction setInitialState(state) {\n  const cellSize = 10;\n\n  const initialState = {\n    cellSize,\n  };\n\n  return state.merge(initialState);\n}\n\nfunction generateDefaultState() {\n  return setInitialState(Map(), { type: type.SET_INIT_STATE, state: {} });\n}\n\nconst pipeReducers = reducers => (initialState, action) =>\n  reducers.reduce((state, reducer) => reducer(state, action), initialState);\n\nfunction partialReducer(state, action) {\n  switch (action.type) {\n    case type.SET_INIT_STATE:\n      return setInitialState(state);\n    default:\n      return state;\n  }\n}\n\nexport default function(state = generateDefaultState(), action) {\n  return partialReducer(state, action).merge({\n    canvas: pipeReducers([canvasReducer, selectedCanvasReducer])\n      (state.get('canvas'),\n      action),\n    drawingTool: drawingToolReducer(state.get('drawingTool'), action),\n    palette: paletteReducer(state.get('palette'), action)\n  });\n}\n","import { createStore } from \"redux\";\nimport undoable, { includeAction } from 'redux-undo';\nimport reducer from \"./reducers/reducer\";\nimport * as actions from './actions/action';\nimport {\n    APPLY_ERASER,\n    APPLY_EYE_DROPPER,\n    APPLY_PAINT_BUCKET,\n    APPLY_PENCIL,\n    CLEAR\n} from './actions/actionTypes';\n\nconst createIncludedActions = () =>\n  includeAction([\n    APPLY_ERASER,\n    APPLY_EYE_DROPPER,\n    APPLY_PAINT_BUCKET,\n    APPLY_PENCIL,\n    CLEAR\n  ]);\n\nlet store = createStore(undoable(reducer, {\n    filter: createIncludedActions(),\n    debug: true\n    })\n);\n\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/imports.css';\nimport './index.css'\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport store from './redux/store.js'\nimport * as serviceWorker from './serviceWorker';\n\n// as shown in react-redux document to make the Redux store available\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App dispatch={store.dispatch}/>\n  </Provider>,\n  rootElement\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}